// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package device is a generated GoMock package.
package device

import (
	context "context"
	reflect "reflect"
	domain "webserver/src/app/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddDevice mocks base method.
func (m *MockUseCase) AddDevice(ctx context.Context, device *domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDevice indicates an expected call of AddDevice.
func (mr *MockUseCaseMockRecorder) AddDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDevice", reflect.TypeOf((*MockUseCase)(nil).AddDevice), ctx, device)
}

// DeleteDevice mocks base method.
func (m *MockUseCase) DeleteDevice(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockUseCaseMockRecorder) DeleteDevice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockUseCase)(nil).DeleteDevice), ctx, id)
}

// GetDeviceByID mocks base method.
func (m *MockUseCase) GetDeviceByID(ctx context.Context, ID int) (*domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByID", ctx, ID)
	ret0, _ := ret[0].(*domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByID indicates an expected call of GetDeviceByID.
func (mr *MockUseCaseMockRecorder) GetDeviceByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByID", reflect.TypeOf((*MockUseCase)(nil).GetDeviceByID), ctx, ID)
}

// InitializeRepository mocks base method.
func (m *MockUseCase) InitializeRepository() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeRepository")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeRepository indicates an expected call of InitializeRepository.
func (mr *MockUseCaseMockRecorder) InitializeRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeRepository", reflect.TypeOf((*MockUseCase)(nil).InitializeRepository))
}

// ListDevices mocks base method.
func (m *MockUseCase) ListDevices(ctx context.Context) ([]*domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx)
	ret0, _ := ret[0].([]*domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockUseCaseMockRecorder) ListDevices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockUseCase)(nil).ListDevices), ctx)
}

// SearchDevicesByBrand mocks base method.
func (m *MockUseCase) SearchDevicesByBrand(ctx context.Context, brand string) ([]domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDevicesByBrand", ctx, brand)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDevicesByBrand indicates an expected call of SearchDevicesByBrand.
func (mr *MockUseCaseMockRecorder) SearchDevicesByBrand(ctx, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDevicesByBrand", reflect.TypeOf((*MockUseCase)(nil).SearchDevicesByBrand), ctx, brand)
}

// UpdateDevice mocks base method.
func (m *MockUseCase) UpdateDevice(ctx context.Context, id int, device *domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, id, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockUseCaseMockRecorder) UpdateDevice(ctx, id, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockUseCase)(nil).UpdateDevice), ctx, id, device)
}
