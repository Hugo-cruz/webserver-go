// Code generated by MockGen. DO NOT EDIT.
// Source: ./device.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	domain "webserver/src/app/domain"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockRepository) Connect() (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockRepositoryMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRepository)(nil).Connect))
}

// Delete mocks base method.
func (m *MockRepository) Delete(deviceId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", deviceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(deviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), deviceId)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll() ([]*domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll))
}

// FindByBrand mocks base method.
func (m *MockRepository) FindByBrand(brand string) ([]domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBrand", brand)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBrand indicates an expected call of FindByBrand.
func (mr *MockRepositoryMockRecorder) FindByBrand(brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBrand", reflect.TypeOf((*MockRepository)(nil).FindByBrand), brand)
}

// FindById mocks base method.
func (m *MockRepository) FindById(deviceId int) (*domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", deviceId)
	ret0, _ := ret[0].(*domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRepositoryMockRecorder) FindById(deviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRepository)(nil).FindById), deviceId)
}

// Initialize mocks base method.
func (m *MockRepository) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockRepositoryMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockRepository)(nil).Initialize))
}

// Save mocks base method.
func (m *MockRepository) Save(device *domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), device)
}

// Update mocks base method.
func (m *MockRepository) Update(device *domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), device)
}
